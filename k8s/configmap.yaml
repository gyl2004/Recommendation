apiVersion: v1
kind: ConfigMap
metadata:
  name: recommendation-config
  namespace: recommendation-system
data:
  # 应用配置
  application.yml: |
    server:
      port: 8080
    spring:
      application:
        name: recommendation-service
      datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        hikari:
          maximum-pool-size: 20
          minimum-idle: 5
          connection-timeout: 30000
          idle-timeout: 600000
          max-lifetime: 1800000
      redis:
        timeout: 2000ms
        lettuce:
          pool:
            max-active: 8
            max-idle: 8
            min-idle: 0
      rabbitmq:
        host: rabbitmq
        port: 5672
        username: admin
        password: password
    
    # 推荐系统配置
    recommendation:
      cache:
        ttl: 3600
        max-size: 10000
      algorithm:
        recall-size: 1000
        rank-size: 100
      feature:
        user-feature-ttl: 7200
        content-feature-ttl: 86400
    
    # 监控配置
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: always
      metrics:
        export:
          prometheus:
            enabled: true
    
    # 日志配置
    logging:
      level:
        com.recommendation: INFO
        org.springframework: WARN
      pattern:
        console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
        file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
      file:
        name: /var/log/recommendation-service.log
        max-size: 100MB
        max-history: 30

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: recommendation-system
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # 日志格式
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';
        
        access_log /var/log/nginx/access.log main;
        
        # 基础配置
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;
        
        # Gzip压缩
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        
        # 限流配置
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=recommend:10m rate=100r/s;
        
        # 上游服务
        upstream recommendation_backend {
            least_conn;
            server recommendation-service:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream user_backend {
            least_conn;
            server user-service:8081 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream content_backend {
            least_conn;
            server content-service:8082 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        server {
            listen 80;
            server_name api.recommendation.com;
            
            # 健康检查
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # 推荐API
            location /api/v1/recommend {
                limit_req zone=recommend burst=20 nodelay;
                proxy_pass http://recommendation_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 5s;
                proxy_send_timeout 10s;
                proxy_read_timeout 10s;
            }
            
            # 用户API
            location /api/v1/users {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://user_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # 内容API
            location /api/v1/contents {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://content_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }