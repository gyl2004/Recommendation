version: '3.8'

services:
  # API网关
  nginx:
    image: nginx:alpine
    container_name: recommendation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./api-gateway/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./api-gateway/nginx/conf.d:/etc/nginx/conf.d
      - ./api-gateway/security/ssl:/etc/nginx/ssl
    depends_on:
      - recommendation-service
      - user-service
      - content-service
    networks:
      - recommendation-network
    restart: unless-stopped

  # Kong API网关
  kong:
    image: kong:latest
    container_name: recommendation-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./api-gateway/kong/kong.yml:/kong/declarative/kong.yml
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - recommendation-network
    restart: unless-stopped

  # 推荐服务
  recommendation-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.recommendation-service
    container_name: recommendation-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/recommendation?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - redis
      - elasticsearch
      - rabbitmq
    networks:
      - recommendation-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.user-service
    container_name: user-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/recommendation?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - redis
    networks:
      - recommendation-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # 内容服务
  content-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.content-service
    container_name: content-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/recommendation?useSSL=false&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ports:
      - "8082:8082"
    depends_on:
      - mysql
      - elasticsearch
    networks:
      - recommendation-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # 特征服务
  feature-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.feature-service
    container_name: feature-service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - clickhouse
      - rabbitmq
    networks:
      - recommendation-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # 排序服务
  ranking-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.ranking-service
    container_name: ranking-service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MODEL_PATH=/app/models
    ports:
      - "8001:8001"
    volumes:
      - ./ranking-service/models:/app/models
    depends_on:
      - redis
    networks:
      - recommendation-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # 数据收集服务
  data-collection-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.feature-service
    container_name: data-collection-service
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - CLICKHOUSE_HOST=clickhouse
      - CLICKHOUSE_PORT=8123
    ports:
      - "8003:8000"
    depends_on:
      - rabbitmq
      - clickhouse
    networks:
      - recommendation-network
    restart: unless-stopped

  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: recommendation-mysql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: recommendation
      MYSQL_USER: app
      MYSQL_PASSWORD: apppassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - recommendation-network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  # Redis缓存
  redis:
    image: redis:alpine
    container_name: recommendation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - recommendation-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf

  # Elasticsearch搜索引擎
  elasticsearch:
    image: elasticsearch:7.17.0
    container_name: recommendation-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - recommendation-network
    restart: unless-stopped

  # ClickHouse分析数据库
  clickhouse:
    image: yandex/clickhouse-server:latest
    container_name: recommendation-clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./scripts/clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - recommendation-network
    restart: unless-stopped

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3-management
    container_name: recommendation-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - recommendation-network
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: recommendation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - recommendation-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: recommendation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - recommendation-network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  clickhouse_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  recommendation-network:
    driver: bridge